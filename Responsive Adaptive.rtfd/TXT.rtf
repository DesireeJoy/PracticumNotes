{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 CourierNewPSMT;
\f3\fswiss\fcharset0 Arial-BoldMT;\f4\froman\fcharset0 Times-Bold;}
{\colortbl;\red255\green255\blue255;\red20\green21\blue26;\red255\green255\blue255;\red0\green0\blue0;
\red42\green44\blue51;\red245\green247\blue251;\red16\green60\blue192;\red26\green29\blue34;\red189\green123\blue47;
\red44\green155\blue54;}
{\*\expandedcolortbl;;\cssrgb\c10196\c10588\c13333;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c21961\c22745\c25882;\cssrgb\c96863\c97647\c98824;\cssrgb\c6667\c33333\c80000;\cssrgb\c13725\c15294\c18039;\cssrgb\c79216\c55294\c23922;
\cssrgb\c19608\c65882\c27451;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 There are only three ways you can adjust your website to different screen sizes without using JavaScript:
\f1\fs24 \cf4 \strokec4 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f0\fs36 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use relative units of measurement like 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 vh
\f0\fs36 \cf2 \cb3 \strokec2 , 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 vw
\f0\fs36 \cf2 \cb3 \strokec2 , and 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 %
\f0\fs36 \cf2 \cb3 \strokec2  to make a website responsive.\uc0\u8232 \cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Write separate CSS rules for common screen sizes, like mobile, tablet, and desktop.\uc0\u8232 \cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 You can decide whether or not to display a certain element depending on certain conditions. You can do this by changing the value of the 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 display
\f0\fs36 \cf2 \cb3 \strokec2  property. A value of 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 none
\f0\fs36 \cf2 \cb3 \strokec2  will hide the element, and a value of 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 visible
\f0\fs36 \cf2 \cb3 \strokec2  will show\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa373\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \'a0\cb1 \cb3 \uc0\u8232 \cb1 \
\pard\pardeftab720\sl620\partightenfactor0

\f3\b\fs45\fsmilli22667 \cf2 \cb3 Desktop First
\f4\fs36 \cf4 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\b0 \cf2 \strokec2 This is the more traditional approach. You start off by building your interface for full-sized screens, such as desktops and laptops, and only then do you start thinking about smaller resolutions like tablets and smartphones. Developers also tend to apply a separate set of styles to especially large desktop displays.
\f1\fs24 \cf4 \strokec4 \

\f0\fs36 \cf2 \strokec2 This has been the most prominent approach over the course of the Internet's lifetime just because fully-fledged smartphone browsers are quite a recent invention.
\f1\fs24 \cf4 \strokec4 \

\f0\fs36 \cf2 \strokec2 As such, while mobile browsing is currently enjoying exponential growth in popularity, Desktop First is still the most popular strategy for working on a web project. Most web devs find this approach more familiar and comfortable to work with, especially when it comes to discussing and agreeing on a brief with a client.
\f1\fs24 \cf4 \strokec4 \
\pard\pardeftab720\sl620\partightenfactor0

\f3\b\fs45\fsmilli22667 \cf2 \strokec2 Mobile First
\f4\fs36 \cf4 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\b0 \cf2 \strokec2 Nowadays, the most frequently visited websites are accessed from smartphones. These include social media, online shopping, and food delivery sites. As the name suggests, this approach of web design starts from smaller screen sizes and works its way up to larger resolutions in order to provide the best possible experience for mobile users.
\f1\fs24 \cf4 \strokec4 \

\f0\fs36 \cf2 \strokec2 Websites load faster on smartphones as there are generally fewer elements, and features like animations are made much simpler or done away with completely. Extraneous elements will only annoy and burden mobile users.
\f1\fs24 \cf4 \strokec4 \

\f0\fs36 \cf2 \strokec2 Both of these strategies are perfectly valid. Still, the question of which principle is the best for approaching a project is a hot topic for debate among web developers. Taking this into account, our goal is to master the necessary skills and tools to be able to comfortably use both the Desktop First and Mobile First approaches.
\f1\fs24 \cf4 \strokec4 \
\pard\pardeftab720\sl320\partightenfactor0
\cf4 \'a0\
\'a0\
\'a0\
\'a0\
\pard\pardeftab720\sl720\partightenfactor0

\f0\fs53\fsmilli26667 \cf4 Screen Size
\f4\b\fs48 \
\pard\pardeftab720\sl480\sa373\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://screensizemap.com/"}}{\fldrslt 
\f0\b0\fs36 \cf7 \ul \ulc7 \strokec7 https://screensizemap.com/}}
\f1\b0\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls2\ilvl0
\f0\fs36 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Make responsive layouts.\uc0\u8232 \cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create responsive blocks.\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa373\partightenfactor0
\ls2\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Change CSS styles at breakpoints.\uc0\u8232 \cb1 \
\pard\pardeftab720\sl580\sa373\partightenfactor0

\fs42\fsmilli21333 \cf4 \cb3 \strokec4 analyzing the design
\f4\b\fs36 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls3\ilvl0
\f0\b0 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How does the number of rows and columns change when elements are compressed?\uc0\u8232 \cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Do elements change their order relative to one another?\uc0\u8232 \cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How do the dimensions and margins of elements change? Try to identify patterns or think of some rules that can be applied.\uc0\u8232 \cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What elements appear or disappear depending on the screen size?\uc0\u8232 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa373\partightenfactor0
\ls3\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 How do items respond to changes in the styles of their containers? For example, the 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 row
\f0\fs36 \cf2 \cb3 \strokec2  value of the 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 flex-direction
\f0\fs36 \cf2 \cb3 \strokec2  property is often replaced with the 
\f2\fs29\fsmilli14667 \cf5 \cb6 \strokec5 column
\f0\fs36 \cf2 \cb3 \strokec2  value to bring positioned elements back into the flow.\uc0\u8232 \cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f1\fs24 \cf4 \cb3 \strokec4 \'a0\
\pard\pardeftab720\sl720\partightenfactor0

\f3\b\fs53\fsmilli26667 \cf4 GRID
\f4\fs48 \
\pard\pardeftab720\sl580\partightenfactor0

\f0\b0\fs42\fsmilli21333 \cf4 What is Grid Layout?
\f4\b\fs36 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\b0 \cf2 \strokec2 CSS Grid Layout is a system that allows us to arrange elements along both the x- and y-axes simultaneously.
\f1\fs24 \cf4 \strokec4 \

\f0\fs36 \cf2 \strokec2 Grid has been a hot potato for a while, with people often saying that its time has yet to come. However, this is no longer the case, and is now widely used by developers. A quick look at {\field{\*\fldinst{HYPERLINK "https://caniuse.com/#search=grid"}}{\fldrslt \cf8 \ul \ulc8 \strokec8 CanIUse}} will tell you that Grid Layout currently enjoys widespread browser support.
\f1\fs24 \cf4 \strokec4 \
\pard\pardeftab720\sl380\partightenfactor0

\f2\fs28 \cf9 \cb6 \strokec9 .container\cf5 \strokec5  \{
\f1\fs24 \cf4 \cb3 \strokec4 \
\pard\pardeftab720\sl380\partightenfactor0

\f2\fs28 \cf5 \cb6 \strokec5 \'a0\'a0\'a0\'a0\cf10 \strokec10 display\cf5 \strokec5 : grid;
\f1\fs24 \cf4 \cb3 \strokec4 \

\f2\fs28 \cf5 \cb6 \strokec5 \}
\f1\fs24 \cf4 \cb3 \strokec4 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\fs36 \cf2 \strokec2 The main difference between Grid and flexbox is how items are arranged by default. When you create a grid container, it's initially made up of one row and one column, which takes up the whole container. If you add more elements to the container, they'll go one on top of the other. For each element you add, another row is created, but there will still only be one column by default. We'll show you how to control the number of rows and columns in Lesson 3.
\f1\fs24 \cf4 \strokec4 \

\f0\fs36 \cf2 \strokec2 Changing the order of grid items is much easier than with flex items. All you need is a few lines of CSS code, and boom! Your website is now responsive.\

\f1\fs24 \cf4 \strokec4 \
\pard\pardeftab720\sl580\partightenfactor0

\f0\fs42\fsmilli21333 \cf4 CSS Grid Layout Terminology
\f4\b\fs36 \
\pard\pardeftab720\sl480\partightenfactor0

\f0\b0 \cf2 \strokec2 In order to get a better idea of what's going on, we need to take a closer look at how grids are formed and break down their constituent parts.
\f1\fs24 \cf4 \strokec4 \

\f0\fs36 \cf2 \strokec2 A grid container consists of a set of horizontal and vertical grid lines inside which grid items are placed, with each item being a direct child of the grid container.
\f1\fs24 \cf4 \strokec4 \
\pard\pardeftab720\sl480\sa373\partightenfactor0

\f0\fs36 \cf2 \strokec2 s
\f1\fs24 \cf4 \strokec4 \
}