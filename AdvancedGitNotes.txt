Branches
Branches can be described as isolated versions of your site where you can make commits, and they won't be seen elsewhere. It's very useful when there are several people developing a website: each can work in their own branch without disturbing others.
Branches are useful even if you work alone. Before coding a new feature, you should make a new branch. When you finish working in this branch, you can merge it with the main branch. It ensures the main branch always has the stable version of your project.
The main development branch is called master. It’s usually used to store the final version of a code, and it's the very branch users see.
The master branch
The master branch is created automatically when you initialize a Git repo and make your first commit.
Let’s create a test project and name it learn_branches. Create index.html and style.css files in it, and then commit the project:
# let's create a new project and initialize it in Git
mkdir learn_branches && cd learn_branches && git init && touch index.html style.css

git add . # it adds all the files, you can call "git add -A" instead
git commit -m "Added initial commit" 
You'll notice that we wrote git add . — the . accomplishes the same task -A would have, but only stages changes made in the folder you're currently in and its subfolders.
After you’ve added the commit, the master branch appears. Enter this command to check it:
git branch # command for listing branches
* master # your main branch, the asterisk highlights the branch you are currently in 
image
Remember you can exit the branch list by pressing Q.
Now add this simple HTML code in index.html:
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Git</title>
</head>
<body>

</body>
</html> 
Then make another commit:
git add . && git commit -m "Added basic markup" 
image
Creating a new branch using git branch
Let’s start coding the header for the test project. Create a separate branch to work on the new feature. To do it, execute a command by writing git branch followed by the name you want to give your new branch. Choose such a name for the branch so that it reflects what’s going on in it. The branch name shouldn’t contain any spaces, otherwise you’ll get an error. We'll discuss naming in more detail in the end of the lesson.
What we are working on is a new feature, which is a header, so it's calling the new branch feature/header will do well:
pwd # print working directory
/Users/students-yandex/dev/learn_branches

git branch feature/header # created a new branch
git branch # checked the current branch
feature/header # the new branch has appeared
* master # but, as the asterisk shows, we're still working in the master branch 
image
Even though we created the feature/header branch, we're still working inside master. To switch to the feature/header branch, enter the git checkout feature/header command:
git checkout feature/header # switched to the feature/header branch
git branch # checked the current branch
* feature/header # as you can see, the asterisk moved! We're now in feature/header
master 
Git also allows creating a branch and immediately switching to it. It's done with this command:
git checkout -b feature/header # created the feature/header branch and immediately switched to it 
We have switched to the feature/header branch. Let’s add the header and commit it:
<!-- index.html -->

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Git</title>
    <link rel="stylesheet" href="./style.css">
</head>
<body>
    <header class="header"></header>
</body>
</html>

```css
/* style.css */

body {
    margin: 0;
}

.header {
    height: 100px;
    background-color: #000;
} 
git branch
* feature/header
master

git add . && git commit -m "Added header" 
image
To sum up
You successfully created master and feature/header branches. Practice moving back and forth between them using git checkout and git branch — notice that the code in your code editor changes while you do so.
You can create a branch and switch to it with just one command using git checkout with the -b key:
git checkout -b branch_name # Git will create a new branch and switch to it 
There are different approaches to branch naming; moreover, each team chooses their own. There is the general principle: branch names should always make it clear for other developers what’s going on inside them.
If a branch has a new feature, start its name with the word feature:
git checkout -b feature/header 
If you’re going to fix bug on a branch, start the name with bugfix:
git checkout -b bugfix/horizontal-scroll 
When you finish working in a branch (say, you’ve finished the header), you need to add the result of your work into the main branch. How to do it? We'll see in the next lesson.
